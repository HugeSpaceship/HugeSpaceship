// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: resources.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const checkResources = `-- name: CheckResources :many
SELECT l.hash
from UNNEST($1::text[]) as l(hash)
         LEFT JOIN resources r on l.hash = r.hash
WHERE r.hash is null
`

func (q *Queries) CheckResources(ctx context.Context, resources []string) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, checkResources, resources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var hash interface{}
		if err := rows.Scan(&hash); err != nil {
			return nil, err
		}
		items = append(items, hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertResource = `-- name: InsertResource :exec
INSERT INTO resources (uploader,size,resource_type,hash,backend,backend_name,created) VALUES (
    $1::uuid,
    $2::bigint,
    $3::resource_type,
    $4::text,
    $5::resource_backends,
    $6::text,
    NOW()
)
`

type InsertResourceParams struct {
	Uploader    uuid.UUID
	Size        int64
	Type        ResourceType
	Hash        string
	Backend     ResourceBackends
	Backendname string
}

func (q *Queries) InsertResource(ctx context.Context, arg InsertResourceParams) error {
	_, err := q.db.Exec(ctx, insertResource,
		arg.Uploader,
		arg.Size,
		arg.Type,
		arg.Hash,
		arg.Backend,
		arg.Backendname,
	)
	return err
}
