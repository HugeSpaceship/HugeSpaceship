// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: resources.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const checkResource = `-- name: CheckResource :one
SELECT EXISTS (
    SELECT hash FROM resources WHERE hash = $1::text)
`

func (q *Queries) CheckResource(ctx context.Context, hash string) (bool, error) {
	row := q.db.QueryRow(ctx, checkResource, hash)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkResources = `-- name: CheckResources :many
SELECT (l.hash)::text
from UNNEST($1::text[]) as l(hash)
         LEFT JOIN resources r on l.hash = r.hash
WHERE r.hash is null
`

func (q *Queries) CheckResources(ctx context.Context, resources []string) ([]string, error) {
	rows, err := q.db.Query(ctx, checkResources, resources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var l_hash string
		if err := rows.Scan(&l_hash); err != nil {
			return nil, err
		}
		items = append(items, l_hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resources WHERE hash = $1::text
`

func (q *Queries) DeleteResource(ctx context.Context, hash string) error {
	_, err := q.db.Exec(ctx, deleteResource, hash)
	return err
}

const getResource = `-- name: GetResource :one
SELECT hash, resource_type, size, created, uploader FROM resources WHERE hash = $1::text LIMIT 1
`

func (q *Queries) GetResource(ctx context.Context, hash string) (Resource, error) {
	row := q.db.QueryRow(ctx, getResource, hash)
	var i Resource
	err := row.Scan(
		&i.Hash,
		&i.ResourceType,
		&i.Size,
		&i.Created,
		&i.Uploader,
	)
	return i, err
}

const insertResource = `-- name: InsertResource :exec
INSERT INTO resources (uploader,size,resource_type,hash,created) VALUES (
    $1::uuid,
    $2::bigint,
    $3::resource_type,
    $4::text,
    NOW()
)
`

type InsertResourceParams struct {
	Uploader uuid.UUID
	Size     int64
	Type     ResourceType
	Hash     string
}

func (q *Queries) InsertResource(ctx context.Context, arg InsertResourceParams) error {
	_, err := q.db.Exec(ctx, insertResource,
		arg.Uploader,
		arg.Size,
		arg.Type,
		arg.Hash,
	)
	return err
}
